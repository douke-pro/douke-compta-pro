// =============================================================================
// DOUK√à COMPTA PRO - APPLICATION PRINCIPALE S√âCURIS√âE
// =============================================================================

// Application State - √âTAT ORIGINAL COMPLET + AJOUTS CRITIQUES DE S√âCURIT√â
const app = {
    currentProfile: null,
    currentCompany: null,
    currentUser: null,
    isAuthenticated: false,
    accounts: [],
    entries: [],
    companies: [],
    users: [],
    cashRegisters: [],
    companyLogo: null,
    notifications: [],
    deadlines: [],
    
    // =============================================================================
    // NOUVELLES VARIABLES CRITIQUES POUR LA S√âPARATION DES DONN√âES
    // =============================================================================
    currentCompanyId: null,              // ID de l'entreprise actuellement s√©lectionn√©e
    availableCompanies: [],              // Entreprises accessibles selon le profil
    filteredData: {                      // Cache des donn√©es filtr√©es
        entries: [],
        accounts: [],
        reports: []
    },
    
    // =============================================================================
    // SYNCHRONISATION PIWA (ADMIN/COLLABORATEUR SENIOR UNIQUEMENT)
    // =============================================================================
    syncSettings: {
        enabled: false,                  // Activ√© uniquement pour admin/collab senior
        interval: 30000,                 // 30 secondes
        lastSync: null,
        isOnline: navigator.onLine,
        syncWorker: null,
        autoSyncTimer: null
    }
};

// Theme management - FONCTION ORIGINALE COMPL√àTE (CONSERV√âE)
const themeManager = {
    current: 'system',
    
    init() {
        // Detect initial theme
        if (localStorage.getItem('theme') === 'dark' ||
            (!localStorage.getItem('theme') && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            document.documentElement.classList.add('dark');
            this.current = 'dark';
        } else if (localStorage.getItem('theme') === 'light') {
            document.documentElement.classList.remove('dark');
            this.current = 'light';
        } else {
            this.current = 'system';
        }

        // Listen for system theme changes
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
            if (this.current === 'system') {
                if (event.matches) {
                    document.documentElement.classList.add('dark');
                } else {
                    document.documentElement.classList.remove('dark');
                }
            }
        });
    },

    setTheme(theme) {
        this.current = theme;
        if (theme === 'dark') {
            document.documentElement.classList.add('dark');
            localStorage.setItem('theme', 'dark');
        } else if (theme === 'light') {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('theme', 'light');
        } else {
            localStorage.removeItem('theme');
            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        }
    }
};

// =============================================================================
// GESTIONNAIRE DE S√âPARATION DES DONN√âES PAR ENTREPRISE - CRITIQUE
// =============================================================================
class CompanyDataManager {
    constructor() {
        this.initialized = false;
    }

    // Initialiser la s√©lection d'entreprise selon le profil
    initializeCompanySelection() {
        if (!app.currentUser || !app.currentProfile) {
            console.warn('‚ö†Ô∏è Utilisateur non connect√© pour la s√©lection d\'entreprise');
            return;
        }

        try {
            // D√©terminer les entreprises accessibles selon le profil
            this.setAvailableCompanies();
            
            // Restaurer la derni√®re entreprise s√©lectionn√©e ou s√©lectionner la premi√®re
            this.restoreSelectedCompany();
            
            // Cr√©er l'interface de s√©lection
            this.renderCompanySelector();
            
            // Filtrer toutes les donn√©es selon l'entreprise s√©lectionn√©e
            this.filterAllData();
            
            this.initialized = true;
            console.log('‚úÖ Gestionnaire de s√©paration des donn√©es initialis√©');
            
        } catch (error) {
            console.error('‚ùå Erreur initialisation s√©paration donn√©es:', error);
        }
    }

    // D√©finir les entreprises accessibles selon le profil
    setAvailableCompanies() {
        if (app.currentProfile === 'admin') {
            // Admin : acc√®s √† toutes les entreprises
            app.availableCompanies = [...app.companies];
        } else if (app.currentProfile === 'collaborateur_senior' || app.currentProfile === 'collaborateur') {
            // Collaborateurs : seulement les entreprises assign√©es
            app.availableCompanies = app.companies.filter(company =>
                app.currentUser.assignedCompanies && 
                app.currentUser.assignedCompanies.includes(company.id)
            );
        } else if (app.currentProfile === 'user') {
            // Utilisateur simple : seulement son entreprise
            app.availableCompanies = app.companies.filter(company =>
                company.id === app.currentUser.companyId
            );
        } else if (app.currentProfile === 'caissier') {
            // Caissier : entreprise de sa caisse assign√©e
            const cashRegister = app.cashRegisters.find(cr => cr.userId === app.currentUser.id);
            if (cashRegister) {
                app.availableCompanies = app.companies.filter(company =>
                    company.id === cashRegister.companyId
                );
            }
        } else {
            app.availableCompanies = [];
        }

        console.log(`üè¢ ${app.availableCompanies.length} entreprise(s) accessible(s) pour ${app.currentProfile}`);
    }

    // Restaurer la derni√®re entreprise s√©lectionn√©e
    restoreSelectedCompany() {
        // Essayer de restaurer depuis localStorage
        const savedCompanyId = localStorage.getItem('selectedCompanyId');
        
        if (savedCompanyId && app.availableCompanies.some(c => c.id == savedCompanyId)) {
            app.currentCompanyId = parseInt(savedCompanyId);
            app.currentCompany = savedCompanyId; // Maintenir la compatibilit√© avec l'ancien syst√®me
        } else if (app.availableCompanies.length > 0) {
            // S√©lectionner la premi√®re entreprise disponible
            app.currentCompanyId = app.availableCompanies[0].id;
            app.currentCompany = app.availableCompanies[0].id; // Maintenir la compatibilit√©
        } else {
            app.currentCompanyId = null;
            app.currentCompany = null;
            console.warn('‚ö†Ô∏è Aucune entreprise accessible pour cet utilisateur');
        }

        if (app.currentCompanyId) {
            localStorage.setItem('selectedCompanyId', app.currentCompanyId);
            console.log(`üéØ Entreprise s√©lectionn√©e: ${app.currentCompanyId}`);
        }
    }

    // Changer d'entreprise active (FONCTION CRITIQUE)
    selectActiveCompany(companyId) {
        // V√©rifier l'autorisation d'acc√®s √† cette entreprise
        if (!app.availableCompanies.some(c => c.id == companyId)) {
            console.error('‚ùå Acc√®s refus√© √† l\'entreprise:', companyId);
            this.showUnauthorizedMessage();
            return false;
        }

        try {
            const previousCompany = app.currentCompanyId;
            app.currentCompanyId = parseInt(companyId);
            app.currentCompany = companyId; // Maintenir la compatibilit√© avec l'ancien syst√®me
            
            // Sauvegarder la s√©lection
            localStorage.setItem('selectedCompanyId', app.currentCompanyId);
            
            // Filtrer toutes les donn√©es selon la nouvelle entreprise
            this.filterAllData();
            
            // Mettre √† jour l'interface
            this.updateCompanyUI();
            
            // Rafra√Æchir toutes les vues
            this.refreshAllViews();
            
            // D√©clencher la synchronisation si autoris√©e
            if (syncManager.canAccessAutoSync()) {
                syncManager.triggerSync();
            }

            const company = app.companies.find(c => c.id === app.currentCompanyId);
            console.log(`‚úÖ Entreprise chang√©e: ${company ? company.name : 'Inconnue'}`);
            
            if (typeof showSuccessMessage === 'function') {
                showSuccessMessage(`‚úÖ Entreprise s√©lectionn√©e: ${company ? company.name : 'Inconnue'}`);
            }
            
            // Appeler la fonction originale si elle existe
            if (typeof updateSelectedCompanyInfo === 'function') {
                updateSelectedCompanyInfo();
            }
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Erreur changement d\'entreprise:', error);
            app.currentCompanyId = previousCompany; // Restaurer l'√©tat pr√©c√©dent
            app.currentCompany = previousCompany;
            return false;
        }
    }

    // FILTRAGE CRITIQUE - Obtenir les √©critures de l'entreprise s√©lectionn√©e UNIQUEMENT
    getFilteredEntries() {
        if (!app.currentCompanyId) {
            console.warn('‚ö†Ô∏è Aucune entreprise s√©lectionn√©e');
            return [];
        }

        return app.entries.filter(entry => 
            entry.companyId === app.currentCompanyId
        );
    }

    // FILTRAGE CRITIQUE - Obtenir le plan comptable de l'entreprise s√©lectionn√©e UNIQUEMENT
    getCompanyAccountingPlan() {
        if (!app.currentCompanyId) {
            console.warn('‚ö†Ô∏è Aucune entreprise s√©lectionn√©e');
            return [];
        }

        const company = app.companies.find(c => c.id === app.currentCompanyId);
        return company && company.accountingPlan ? company.accountingPlan : [];
    }

    // FILTRAGE CRITIQUE - Obtenir toutes les donn√©es filtr√©es
    getFilteredData(dataType) {
        if (!app.currentCompanyId) return [];

        switch (dataType) {
            case 'entries':
                return this.getFilteredEntries();
            case 'accounts':
                return this.getCompanyAccountingPlan();
            case 'cashRegisters':
                return app.cashRegisters.filter(cr => cr.companyId === app.currentCompanyId);
            case 'reports':
                return app.reports ? app.reports.filter(r => r.companyId === app.currentCompanyId) : [];
            default:
                console.warn(`‚ö†Ô∏è Type de donn√©es non reconnu: ${dataType}`);
                return [];
        }
    }

    // Filtrer toutes les donn√©es selon l'entreprise s√©lectionn√©e
    filterAllData() {
        if (!app.currentCompanyId) {
            app.filteredData = { entries: [], accounts: [], reports: [] };
            return;
        }

        app.filteredData = {
            entries: this.getFilteredEntries(),
            accounts: this.getCompanyAccountingPlan(),
            reports: this.getFilteredData('reports')
        };

        console.log(`üîç Donn√©es filtr√©es pour entreprise ${app.currentCompanyId}:`, {
            entries: app.filteredData.entries.length,
            accounts: app.filteredData.accounts.length,
            reports: app.filteredData.reports.length
        });
    }

    // Cr√©er l'interface de s√©lection d'entreprise
    renderCompanySelector() {
        const headerRight = document.querySelector('.header-right') || document.querySelector('header .flex');
        
        if (!headerRight || app.availableCompanies.length <= 1) {
            return; // Pas besoin de s√©lecteur s'il n'y a qu'une entreprise
        }

        // Cr√©er le conteneur du s√©lecteur s'il n'existe pas
        let companySelector = document.getElementById('companySelectorContainer');
        if (!companySelector) {
            companySelector = document.createElement('div');
            companySelector.id = 'companySelectorContainer';
            companySelector.className = 'flex items-center space-x-3 mr-4';
            
            // Ins√©rer avant les autres √©l√©ments du header
            headerRight.insertBefore(companySelector, headerRight.firstChild);
        }

        const currentCompany = app.companies.find(c => c.id === app.currentCompanyId);
        
        companySelector.innerHTML = `
            <div class="relative">
                <label class="block text-xs font-medium text-gray-600 dark:text-gray-400 mb-1">
                    Entreprise active
                </label>
                <select id="activeCompanySelect" 
                        class="bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-primary focus:border-transparent min-w-[200px]">
                    ${app.availableCompanies.map(company => `
                        <option value="${company.id}" ${company.id === app.currentCompanyId ? 'selected' : ''}>
                            ${company.name} (${company.type || 'N/A'})
                        </option>
                    `).join('')}
                </select>
                
                <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                    <i class="fas fa-building mr-1"></i>
                    ${currentCompany ? currentCompany.name : 'Aucune'}
                </div>
            </div>
        `;

        // Attacher l'√©v√©nement de changement (compatible avec le syst√®me existant)
        const select = document.getElementById('activeCompanySelect');
        if (select) {
            select.addEventListener('change', (e) => {
                this.selectActiveCompany(e.target.value);
            });
        }
    }

    // Mettre √† jour l'interface apr√®s changement d'entreprise
    updateCompanyUI() {
        // Mettre √† jour le s√©lecteur
        const select = document.getElementById('activeCompanySelect');
        if (select) {
            select.value = app.currentCompanyId;
        }

        // Mettre √† jour les informations affich√©es
        if (typeof updateSelectedCompanyInfo === 'function') {
            updateSelectedCompanyInfo();
        }

        // Mettre √† jour le titre de la page
        const company = app.companies.find(c => c.id === app.currentCompanyId);
        if (company) {
            document.title = `DOUK√à Compta Pro - ${company.name}`;
        }
    }

    // Rafra√Æchir toutes les vues avec les donn√©es filtr√©es
    refreshAllViews() {
        try {
            // Recharger la vue actuelle (si c'est une fonction de chargement de page)
            const currentView = this.getCurrentView();
            if (currentView && typeof window[currentView] === 'function') {
                window[currentView]();
            }

            // Mettre √† jour le dashboard s'il est affich√©
            if (typeof loadDashboard === 'function' && this.isDashboardActive()) {
                loadDashboard();
            }

            console.log('üîÑ Toutes les vues rafra√Æchies avec les donn√©es filtr√©es');
            
        } catch (error) {
            console.error('‚ùå Erreur lors du rafra√Æchissement des vues:', error);
        }
    }

    // D√©terminer la vue actuelle
    getCurrentView() {
        const mainContent = document.getElementById('mainContent');
        if (!mainContent) return null;

        // Analyser le contenu pour d√©terminer quelle vue est active
        const content = mainContent.innerHTML;
        if (content.includes('√âcritures Comptables') || content.includes('loadEntries')) return 'loadEntries';
        if (content.includes('Plan Comptable') || content.includes('loadAccounts')) return 'loadAccounts';
        if (content.includes('Tableau de Bord') || content.includes('loadDashboard')) return 'loadDashboard';
        if (content.includes('Gestion de Caisse') || content.includes('loadCaisse')) return 'loadCaisse';
        if (content.includes('Rapports') || content.includes('loadReports')) return 'loadReports';
        
        return null;
    }

    // V√©rifier si le dashboard est actif
    isDashboardActive() {
        const mainContent = document.getElementById('mainContent');
        return mainContent && mainContent.innerHTML.includes('Tableau de Bord');
    }

    // Afficher message d'acc√®s non autoris√©
    showUnauthorizedMessage() {
        if (typeof showErrorMessage === 'function') {
            showErrorMessage('‚ùå Vous n\'avez pas l\'autorisation d\'acc√©der √† cette entreprise');
        } else {
            alert('‚ùå Acc√®s non autoris√© √† cette entreprise');
        }
    }

    // V√©rifier si l'utilisateur a acc√®s aux donn√©es multi-entreprises
    hasMultiCompanyAccess() {
        return ['admin', 'collaborateur_senior', 'collaborateur'].includes(app.currentProfile);
    }

    // Obtenir les statistiques de l'entreprise active
    getCompanyStats() {
        if (!app.currentCompanyId) return null;

        const company = app.companies.find(c => c.id === app.currentCompanyId);
        const entries = this.getFilteredEntries();
        const accounts = this.getCompanyAccountingPlan();

        return {
            company: company,
            totalEntries: entries.length,
            totalAccounts: accounts.length,
            lastEntryDate: entries.length > 0 ? Math.max(...entries.map(e => new Date(e.date))) : null,
            monthlyEntries: entries.filter(e => {
                const entryDate = new Date(e.date);
                const now = new Date();
                return entryDate.getMonth() === now.getMonth() && entryDate.getFullYear() === now.getFullYear();
            }).length
        };
    }
}

// =============================================================================
// GESTIONNAIRE DE SYNCHRONISATION PIWA - ADMIN/COLLABORATEUR SENIOR UNIQUEMENT
// =============================================================================
class PIWASyncManager {
    constructor() {
        this.initialized = false;
        this.syncQueue = [];
        this.isSyncing = false;
    }

    // Initialiser la synchronisation automatique (SEULEMENT pour admin/collaborateur senior)
    initializePIWASync() {
        if (!this.canAccessAutoSync()) {
            console.log('‚ÑπÔ∏è Synchronisation automatique non autoris√©e pour ce profil');
            return;
        }

        try {
            // Configurer la synchronisation
            app.syncSettings.enabled = true;
            app.syncSettings.lastSync = new Date();

            // Enregistrer le Service Worker pour la sync en arri√®re-plan
            this.registerSyncService();

            // D√©marrer la synchronisation automatique
            this.startAutoSync();

            // √âcouter les changements de connectivit√©
            this.setupConnectivityListeners();

            // Synchronisation initiale
            this.triggerSync();

            this.initialized = true;
            console.log('‚úÖ Synchronisation PIWA initialis√©e pour', app.currentProfile);

        } catch (error) {
            console.error('‚ùå Erreur initialisation synchronisation PIWA:', error);
        }
    }

    // V√©rifier l'autorisation d'acc√®s √† la synchronisation automatique
    canAccessAutoSync() {
        return app.currentProfile === 'admin' || 
               app.currentProfile === 'collaborateur_senior';
    }

    // Enregistrer le Service Worker
    async registerSyncService() {
        if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {
            try {
                const registration = await navigator.serviceWorker.register('/sw.js');
                console.log('‚úÖ Service Worker enregistr√© pour la synchronisation');
                
                // Enregistrer la synchronisation en arri√®re-plan
                await registration.sync.register('background-sync');
                
            } catch (error) {
                console.warn('‚ö†Ô∏è Service Worker non disponible:', error);
            }
        }
    }

    // D√©marrer la synchronisation automatique
    startAutoSync() {
        if (app.syncSettings.autoSyncTimer) {
            clearInterval(app.syncSettings.autoSyncTimer);
        }

        app.syncSettings.autoSyncTimer = setInterval(() => {
            if (this.canAccessAutoSync() && app.syncSettings.enabled && navigator.onLine) {
                this.backgroundSync();
            }
        }, app.syncSettings.interval);

        console.log(`üîÑ Synchronisation automatique d√©marr√©e (${app.syncSettings.interval / 1000}s)`);
    }

    // Arr√™ter la synchronisation automatique
    stopAutoSync() {
        if (app.syncSettings.autoSyncTimer) {
            clearInterval(app.syncSettings.autoSyncTimer);
            app.syncSettings.autoSyncTimer = null;
        }
        app.syncSettings.enabled = false;
        console.log('‚èπÔ∏è Synchronisation automatique arr√™t√©e');
    }

    // √âcouter les changements de connectivit√©
    setupConnectivityListeners() {
        window.addEventListener('online', () => {
            app.syncSettings.isOnline = true;
            console.log('üåê Connexion r√©tablie - synchronisation automatique');
            this.triggerSync();
        });

        window.addEventListener('offline', () => {
            app.syncSettings.isOnline = false;
            console.log('üì∂ Connexion perdue - mode hors ligne');
        });
    }

    // D√©clencher une synchronisation imm√©diate
    async triggerSync() {
        if (!this.canAccessAutoSync() || this.isSyncing) {
            return;
        }

        try {
            await this.backgroundSync();
        } catch (error) {
            console.error('‚ùå Erreur synchronisation imm√©diate:', error);
        }
    }

    // Synchronisation en arri√®re-plan
    async backgroundSync() {
        if (!this.canAccessAutoSync() || !navigator.onLine || this.isSyncing) {
            return;
        }

        this.isSyncing = true;
        
        try {
            // Synchroniser les donn√©es de l'entreprise active
            if (app.currentCompanyId) {
                await this.syncCompanyData(app.currentCompanyId);
            }

            // Synchroniser les donn√©es utilisateur
            await this.syncUserData();

            // Mettre √† jour le timestamp
            app.syncSettings.lastSync = new Date();

            // Notification discr√®te de succ√®s
            this.showSyncNotification('‚úÖ Donn√©es synchronis√©es', 'success');
            
            console.log('‚úÖ Synchronisation PIWA termin√©e:', new Date().toLocaleTimeString());

        } catch (error) {
            console.error('‚ùå Erreur synchronisation:', error);
            this.showSyncNotification('‚ùå Erreur de synchronisation', 'error');
        } finally {
            this.isSyncing = false;
        }
    }

    // Synchroniser les donn√©es d'une entreprise sp√©cifique
    async syncCompanyData(companyId) {
        // Simulation de la synchronisation des donn√©es entreprise
        return new Promise((resolve) => {
            setTimeout(() => {
                console.log(`üîÑ Donn√©es de l'entreprise ${companyId} synchronis√©es`);
                resolve();
            }, 1000);
        });
    }

    // Synchroniser les donn√©es utilisateur
    async syncUserData() {
        // Simulation de la synchronisation des donn√©es utilisateur
        return new Promise((resolve) => {
            setTimeout(() => {
                console.log('üîÑ Donn√©es utilisateur synchronis√©es');
                resolve();
            }, 500);
        });
    }

    // Afficher une notification de synchronisation
    showSyncNotification(message, type) {
        // Notification discr√®te qui ne perturbe pas l'utilisateur
        if (typeof showNotification === 'function') {
            showNotification(message, type, 2000); // 2 secondes seulement
        } else {
            console.log(`üîî ${message}`);
        }
    }

    // Ajouter des donn√©es √† la queue de synchronisation
    queueForSync(data) {
        this.syncQueue.push({
            ...data,
            timestamp: new Date(),
            companyId: app.currentCompanyId
        });

        // D√©clencher une synchronisation si en ligne
        if (navigator.onLine && this.canAccessAutoSync()) {
            setTimeout(() => this.triggerSync(), 1000);
        }
    }

    // Obtenir le statut de la synchronisation
    getSyncStatus() {
        return {
            enabled: app.syncSettings.enabled,
            canAccess: this.canAccessAutoSync(),
            isOnline: app.syncSettings.isOnline,
            lastSync: app.syncSettings.lastSync,
            queueLength: this.syncQueue.length,
            isSyncing: this.isSyncing
        };
    }
}

// =============================================================================
// INSTANCES GLOBALES DES GESTIONNAIRES
// =============================================================================
const companyDataManager = new CompanyDataManager();
const syncManager = new PIWASyncManager();

// =============================================================================
// GESTIONNAIRE DE MODULES - ENRICHI AVEC S√âCURIT√â (CONSERV√â + AM√âLIOR√â)
// =============================================================================
class ModuleManager {
    constructor() {
        this.requiredFunctions = [
            'initializeData',
            'loadNavigationMenu',
            'updateUserInfo',
            'loadDashboard',
            'loadEntries',
            'loadAccounts',
            'loadCaisse',
            'loadReports',
            'loadImport',
            'loadSettings',
            'loadUsersManagement',
            'loadCompanies',
            'updateSelectedCompanyInfo'
        ];
    }

    // V√©rifier et cr√©er les fonctions manquantes (CONSERV√â)
    ensureFunctionsExist() {
        this.requiredFunctions.forEach(funcName => {
            if (typeof window[funcName] !== 'function') {
                console.warn(`‚ö†Ô∏è Fonction ${funcName} manquante, cr√©ation d'un fallback`);
                window[funcName] = this.createFallback(funcName);
            }
        });
    }

    // Cr√©er une fonction de fallback AVEC s√©paration des donn√©es (AM√âLIOR√â)
    createFallback(funcName) {
        const self = this;
        return function() {
            console.log(`üìÑ Chargement fallback pour ${funcName}`);
            
            // V√©rifier si les donn√©es doivent √™tre filtr√©es
            if (self.requiresDataFiltering(funcName)) {
                self.showFilteredModuleFallback(funcName);
            } else {
                self.showModuleFallback(funcName);
            }
        };
    }

    // D√©terminer si la fonction n√©cessite un filtrage des donn√©es (NOUVEAU)
    requiresDataFiltering(funcName) {
        const dataIntensiveFunctions = [
            'loadDashboard', 'loadEntries', 'loadAccounts', 
            'loadCaisse', 'loadReports'
        ];
        return dataIntensiveFunctions.includes(funcName);
    }

    // Afficher un contenu de fallback AVEC informations de s√©paration (NOUVEAU)
    showFilteredModuleFallback(funcName) {
        const moduleInfo = this.getModuleInfo(funcName);
        const mainContent = document.getElementById('mainContent');
        const companyStats = companyDataManager.getCompanyStats();
        
        if (mainContent && moduleInfo.isPageLoader) {
            mainContent.innerHTML = `
                <div class="space-y-6">
                    <div class="flex justify-between items-center">
                        <h2 class="text-2xl font-bold text-gray-900 dark:text-white">${moduleInfo.title}</h2>
                        ${app.currentCompanyId ? `
                            <div class="bg-primary/10 text-primary px-4 py-2 rounded-lg">
                                <i class="fas fa-building mr-2"></i>
                                ${companyStats ? companyStats.company.name : 'Entreprise inconnue'}
                            </div>
                        ` : `
                            <div class="bg-warning/10 text-warning px-4 py-2 rounded-lg">
                                <i class="fas fa-exclamation-triangle mr-2"></i>
                                Aucune entreprise s√©lectionn√©e
                            </div>
                        `}
                    </div>

                    ${app.currentCompanyId ? `
                        <!-- Informations entreprise active -->
                        <div class="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
                            <h4 class="font-medium text-blue-900 dark:text-blue-100 mb-2">
                                <i class="fas fa-info-circle mr-2"></i>Donn√©es filtr√©es pour cette entreprise
                            </h4>
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                                <div class="text-blue-800 dark:text-blue-200">
                                    üìä ${companyStats ? companyStats.totalEntries : 0} √©critures
                                </div>
                                <div class="text-blue-800 dark:text-blue-200">
                                    üìã ${companyStats ? companyStats.totalAccounts : 0} comptes
                                </div>
                                <div class="text-blue-800 dark:text-blue-200">
                                    üìÖ ${companyStats ? companyStats.monthlyEntries : 0} ce mois
                                </div>
                            </div>
                        </div>
                    ` : ''}

                    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8">
                        <div class="text-center">
                            <div class="w-16 h-16 bg-info text-white rounded-full flex items-center justify-center mx-auto mb-4">
                                <i class="fas fa-code text-2xl"></i>
                            </div>
                            <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Module en d√©veloppement</h3>
                            <p class="text-gray-600 dark:text-gray-400 mb-6">
                                La fonction <code class="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">${funcName}</code> 
                                n'est pas encore impl√©ment√©e dans <strong>${moduleInfo.file}</strong>.
                            </p>
                            
                            <div class="bg-orange-50 dark:bg-orange-900/20 p-4 rounded-lg mb-6">
                                <h4 class="font-medium text-orange-900 dark:text-orange-100 mb-3">
                                    <i class="fas fa-shield-alt mr-2"></i>S√©paration des donn√©es activ√©e
                                </h4>
                                <p class="text-orange-800 dark:text-orange-200 text-sm">
                                    Cette fonction utilisera automatiquement <code>getFilteredEntries()</code> et 
                                    <code>getCompanyAccountingPlan()</code> pour afficher uniquement les donn√©es 
                                    de l'entreprise s√©lectionn√©e.
                                </p>
                            </div>
                            
                            <div class="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg mb-6">
                                <h4 class="font-medium text-blue-900 dark:text-blue-100 mb-3">
                                    <i class="fas fa-lightbulb mr-2"></i>Template s√©curis√© :
                                </h4>
                                <div class="bg-gray-100 dark:bg-gray-800 p-4 rounded text-left overflow-x-auto">
                                    <pre class="text-sm"><code>${this.getSecureTemplate(funcName)}</code></pre>
                                </div>
                            </div>

                            <div class="flex justify-center space-x-4">
                                <button onclick="location.reload()" class="bg-primary hover:bg-primary/90 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                                    <i class="fas fa-sync mr-2"></i>Recharger
                                </button>
                                <button onclick="showModuleStatus()" class="bg-info hover:bg-info/90 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                                    <i class="fas fa-info mr-2"></i>√âtat des modules
                                </button>
                                ${companyDataManager.hasMultiCompanyAccess() ? `
                                    <button onclick="showCompanySelector()" class="bg-success hover:bg-success/90 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                                        <i class="fas fa-building mr-2"></i>Changer d'entreprise
                                    </button>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
    }

    // Obtenir un template s√©curis√© avec s√©paration des donn√©es (NOUVEAU)
    getSecureTemplate(funcName) {
        const templates = {
            'loadDashboard': `function loadDashboard() {
    const entries = getFilteredEntries(); // SEULEMENT entreprise active
    const accounts = getCompanyAccountingPlan(); // SEULEMENT entreprise active
    const stats = getCompanyStats();
    
    const content = \`
        <h2>Tableau de Bord - \${stats.company.name}</h2>
        <div class="grid grid-cols-3 gap-4">
            <div class="card">\${entries.length} √©critures</div>
            <div class="card">\${accounts.length} comptes</div>
            <div class="card">\${stats.monthlyEntries} ce mois</div>
        </div>
    \`;
    document.getElementById('mainContent').innerHTML = content;
}`,
            'loadEntries': `function loadEntries() {
    const entries = getFilteredEntries(); // SEULEMENT entreprise active
    
    const content = \`
        <h2>√âcritures Comptables - Entreprise \${app.currentCompanyId}</h2>
        <div class="entries-table">
            <!-- Afficher uniquement les √©critures de l'entreprise active -->
        </div>
    \`;
    document.getElementById('mainContent').innerHTML = content;
}`,
            'loadAccounts': `function loadAccounts() {
    const accounts = getCompanyAccountingPlan(); // SEULEMENT entreprise active
    
    const content = \`
        <h2>Plan Comptable - Entreprise \${app.currentCompanyId}</h2>
        <div class="accounts-list">
            <!-- Afficher uniquement les comptes de l'entreprise active -->
        </div>
    \`;
    document.getElementById('mainContent').innerHTML = content;
}`
        };

        return templates[funcName] || this.getModuleInfo(funcName).template;
    }

    // Afficher un contenu de fallback (CONSERV√â ORIGINAL)
    showModuleFallback(funcName) {
        const moduleInfo = this.getModuleInfo(funcName);
        const mainContent = document.getElementById('mainContent');
        
        if (mainContent && moduleInfo.isPageLoader) {
            mainContent.innerHTML = `
                <div class="space-y-6">
                    <div class="flex justify-between items-center">
                        <h2 class="text-2xl font-bold text-gray-900 dark:text-white">${moduleInfo.title}</h2>
                    </div>

                    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8">
                        <div class="text-center">
                            <div class="w-16 h-16 bg-info text-white rounded-full flex items-center justify-center mx-auto mb-4">
                                <i class="fas fa-code text-2xl"></i>
                            </div>
                            <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Module en d√©veloppement</h3>
                            <p class="text-gray-600 dark:text-gray-400 mb-6">
                                La fonction <code class="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">${funcName}</code> 
                                n'est pas encore impl√©ment√©e dans <strong>${moduleInfo.file}</strong>.
                            </p>
                            
                            <div class="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg mb-6">
                                <h4 class="font-medium text-blue-900 dark:text-blue-100 mb-3">
                                    <i class="fas fa-lightbulb mr-2"></i>Template de base :
                                </h4>
                                <div class="bg-gray-100 dark:bg-gray-800 p-4 rounded text-left overflow-x-auto">
                                    <pre class="text-sm"><code>${moduleInfo.template}</code></pre>
                                </div>
                            </div>

                            <div class="flex justify-center space-x-4">
                                <button onclick="location.reload()" class="bg-primary hover:bg-primary/90 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                                    <i class="fas fa-sync mr-2"></i>Recharger
                                </button>
                                <button onclick="showModuleStatus()" class="bg-info hover:bg-info/90 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                                    <i class="fas fa-info mr-2"></i>√âtat des modules
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
    }

    // Obtenir les informations d'un module (CONSERV√â + MAINTIEN COMPATIBILIT√â)
    getModuleInfo(funcName) {
        const moduleMap = {
            'initializeData': { 
                title: 'Initialisation', 
                file: 'data.js', 
                isPageLoader: false,
                template: `function initializeData() {\n    // Initialiser les donn√©es de l'app\n    app.accounts = [...]; // Plan comptable\n    app.companies = [...]; // Entreprises\n    app.users = [...]; // Utilisateurs\n    console.log('‚úÖ Donn√©es initialis√©es');\n}`
            },
            'loadNavigationMenu': { 
                title: 'Navigation', 
                file: 'navigation.js', 
                isPageLoader: false,
                template: `function loadNavigationMenu() {\n    // Charger le menu selon le profil\n    const menuElement = document.getElementById('navigationMenu');\n    menuElement.innerHTML = '...';\n}`
            },
            'updateUserInfo': { 
                title: 'Information Utilisateur', 
                file: 'auth.js', 
                isPageLoader: false,
                template: `function updateUserInfo() {\n    // Mettre √† jour les infos utilisateur\n    document.getElementById('currentUser').textContent = app.currentUser.name;\n}`
            },
            'loadDashboard': { 
                title: 'Tableau de Bord', 
                file: 'dashboard.js', 
                isPageLoader: true,
                template: `function loadDashboard() {\n    const content = \`\n        <h2>Tableau de Bord</h2>\n        <div class="grid grid-cols-3 gap-4">\n            <!-- KPI Cards -->\n        </div>\n    \`;\n    document.getElementById('mainContent').innerHTML = content;\n}`
            },
            'loadEntries': { 
                title: '√âcritures Comptables', 
                file: 'entries.js', 
                isPageLoader: true,
                template: `function loadEntries() {\n    const content = \`\n        <h2>√âcritures Comptables</h2>\n        <!-- Formulaires et listes -->\n    \`;\n    document.getElementById('mainContent').innerHTML = content;\n}`
            },
            'loadAccounts': { 
                title: 'Plan Comptable', 
                file: 'accounts.js', 
                isPageLoader: true,
                template: `function loadAccounts() {\n    const content = \`\n        <h2>Plan Comptable SYSCOHADA</h2>\n        <!-- Liste des comptes -->\n    \`;\n    document.getElementById('mainContent').innerHTML = content;\n}`
            },
            'loadCaisse': { 
                title: 'Gestion des Caisses', 
                file: 'caisse.js', 
                isPageLoader: true,
                template: `function loadCaisse() {\n    const content = \`\n        <h2>Gestion des Caisses</h2>\n        <!-- Interface caisse -->\n    \`;\n    document.getElementById('mainContent').innerHTML = content;\n}`
            },
            'loadReports': { 
                title: 'Rapports & √âtats', 
                file: 'reports.js', 
                isPageLoader: true,
                template: `function loadReports() {\n    const content = \`\n        <h2>Rapports & √âtats</h2>\n        <!-- G√©n√©ration rapports -->\n    \`;\n    document.getElementById('mainContent').innerHTML = content;\n}`
            },
            'loadImport': { 
                title: 'Import de Balances', 
                file: 'import.js', 
                isPageLoader: true,
                template: `function loadImport() {\n    const content = \`\n        <h2>Import de Balances</h2>\n        <!-- Interface import -->\n    \`;\n    document.getElementById('mainContent').innerHTML = content;\n}`
            },
            'loadSettings': { 
                title: 'Mon Profil', 
                file: 'settings.js', 
                isPageLoader: true,
                template: `function loadSettings() {\n    const content = \`\n        <h2>Mon Profil</h2>\n        <!-- Param√®tres utilisateur -->\n    \`;\n    document.getElementById('mainContent').innerHTML = content;\n}`
            },
            'loadUsersManagement': { 
                title: 'Gestion Collaborateurs', 
                file: 'settings.js', 
                isPageLoader: true,
                template: `function loadUsersManagement() {\n    const content = \`\n        <h2>Gestion des Collaborateurs</h2>\n        <!-- Interface admin utilisateurs -->\n    \`;\n    document.getElementById('mainContent').innerHTML = content;\n}`
            },
            'loadCompanies': { 
                title: 'Gestion Entreprises', 
                file: 'settings.js', 
                isPageLoader: true,
                template: `function loadCompanies() {\n    const content = \`\n        <h2>Gestion des Entreprises</h2>\n        <!-- Interface admin entreprises -->\n    \`;\n    document.getElementById('mainContent').innerHTML = content;\n}`
            },
            'updateSelectedCompanyInfo': { 
                title: 'Info Entreprise', 
                file: 'navigation.js', 
                isPageLoader: false,
                template: `function updateSelectedCompanyInfo() {\n    // Mettre √† jour les infos entreprise\n    const company = app.companies.find(c => c.id == app.currentCompany);\n    if (company) {\n        document.getElementById('selectedCompanyInfo').innerHTML = company.name;\n    }\n}`
            }
        };

        return moduleMap[funcName] || { 
            title: 'Module Inconnu', 
            file: 'unknown.js', 
            isPageLoader: true,
            template: `function ${funcName}() {\n    // √Ä impl√©menter\n}`
        };
    }
}

// Cr√©er l'instance du gestionnaire de modules (CONSERV√â)
const moduleManager = new ModuleManager();

// =============================================================================
// FONCTIONS GLOBALES EXPOS√âES POUR LA S√âPARATION DES DONN√âES
// =============================================================================

// FONCTION CRITIQUE - S√©lectionner une entreprise active
function selectActiveCompany(companyId) {
    return companyDataManager.selectActiveCompany(companyId);
}

// FONCTION CRITIQUE - Obtenir les √©critures filtr√©es (SEULEMENT entreprise active)
function getFilteredEntries() {
    return companyDataManager.getFilteredEntries();
}

// FONCTION CRITIQUE - Obtenir le plan comptable filtr√© (SEULEMENT entreprise active)
function getCompanyAccountingPlan() {
    return companyDataManager.getCompanyAccountingPlan();
}

// FONCTION CRITIQUE - Obtenir toutes donn√©es filtr√©es
function getFilteredData(dataType) {
    return companyDataManager.getFilteredData(dataType);
}

// Rafra√Æchir toutes les vues avec les donn√©es filtr√©es
function refreshAllViews() {
    companyDataManager.refreshAllViews();
}

// Obtenir les statistiques de l'entreprise active
function getCompanyStats() {
    return companyDataManager.getCompanyStats();
}

// V√©rifier l'acc√®s multi-entreprises
function hasMultiCompanyAccess() {
    return companyDataManager.hasMultiCompanyAccess();
}

// D√©clencher une synchronisation (admin/collaborateur senior uniquement)
function triggerSync() {
    return syncManager.triggerSync();
}

// Obtenir le statut de synchronisation
function getSyncStatus() {
    return syncManager.getSyncStatus();
}

// Afficher le s√©lecteur d'entreprise en modal
function showCompanySelector() {
    if (!hasMultiCompanyAccess()) {
        showErrorMessage('‚ùå Acc√®s non autoris√© au changement d\'entreprise');
        return;
    }

    const modal = `
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-xl p-8 w-full max-w-md mx-4">
                <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-6">
                    <i class="fas fa-building mr-2 text-primary"></i>S√©lectionner une entreprise
                </h3>
                
                <div class="space-y-4">
                    ${app.availableCompanies.map(company => `
                        <button onclick="selectActiveCompany(${company.id}); closeCompanySelector()" 
                                class="w-full p-4 text-left border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors ${company.id === app.currentCompanyId ? 'bg-primary/10 border-primary' : ''}">
                            <div class="flex items-center justify-between">
                                <div>
                                    <div class="font-medium text-gray-900 dark:text-white">${company.name}</div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">${company.type || 'N/A'}</div>
                                </div>
                                ${company.id === app.currentCompanyId ? '<i class="fas fa-check text-primary"></i>' : ''}
                            </div>
                        </button>
                    `).join('')}
                </div>
                
                <div class="flex justify-end mt-6">
                    <button onclick="closeCompanySelector()" 
                            class="bg-gray-500 hover:bg-gray-400 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                        Fermer
                    </button>
                </div>
            </div>
        </div>
    `;

    const modalContainer = document.createElement('div');
    modalContainer.id = 'companySelectorModal';
    modalContainer.innerHTML = modal;
    document.body.appendChild(modalContainer);
}

// Fermer le s√©lecteur d'entreprise
function closeCompanySelector() {
    const modal = document.getElementById('companySelectorModal');
    if (modal) {
        modal.remove();
    }
}

// Exposer globalement les fonctions critiques
window.selectActiveCompany = selectActiveCompany;
window.getFilteredEntries = getFilteredEntries;
window.getCompanyAccountingPlan = getCompanyAccountingPlan;
window.getFilteredData = getFilteredData;
window.refreshAllViews = refreshAllViews;
window.getCompanyStats = getCompanyStats;
window.hasMultiCompanyAccess = hasMultiCompanyAccess;
window.triggerSync = triggerSync;
window.getSyncStatus = getSyncStatus;
window.showCompanySelector = showCompanySelector;
window.closeCompanySelector = closeCompanySelector;

// =============================================================================
// THEME MANAGEMENT - FONCTION ORIGINALE COMPL√àTE (CONSERV√âE)
// =============================================================================
function toggleThemeMenu() {
    const menu = document.getElementById('themeMenu');
    if (menu) {
        menu.classList.toggle('hidden');
    }
}

function setTheme(theme) {
    try {
        themeManager.setTheme(theme);
        const themeMenu = document.getElementById('themeMenu');
        if (themeMenu) {
            themeMenu.classList.add('hidden');
        }
        showSuccessMessage('‚úÖ Th√®me modifi√© : ' + theme);
    } catch (error) {
        console.error('Erreur changement th√®me:', error);
    }
}

// =============================================================================
// FONCTION DE V√âRIFICATION DES MODULES - AM√âLIOR√âE AVEC S√âCURIT√â
// =============================================================================
function showModuleStatus() {
    const status = moduleManager.requiredFunctions.map(func => {
        const exists = typeof window[func] === 'function';
        const info = moduleManager.getModuleInfo(func);
        return `${info.file}: ${func} ${exists ? '‚úÖ' : '‚ùå'}`;
    }).join('\n');

    const securityStatus = `\n\nüîí S√âCURIT√â DES DONN√âES:\n‚úÖ S√©paration par entreprise activ√©e\n‚úÖ Fonctions de filtrage disponibles\n${syncManager.canAccessAutoSync() ? '‚úÖ' : '‚ùå'} Synchronisation PIWA\n\nüè¢ ENTREPRISE ACTIVE:\n${app.currentCompanyId ? `‚úÖ ${getCompanyStats()?.company?.name || 'Inconnue'}` : '‚ùå Aucune entreprise s√©lectionn√©e'}`;

    alert(`√âtat des modules :\n\n${status}${securityStatus}\n\n‚úÖ = Fonction disponible\n‚ùå = Utilise un fallback`);
}

// Rendre la fonction globale (CONSERV√â)
window.showModuleStatus = showModuleStatus;

// =============================================================================
// FONCTION DE TEST POUR V√âRIFIER LE CHARGEMENT DES MODULES (NOUVEAU)
// =============================================================================
function testModuleLoading() {
    console.log('üß™ Test de chargement des modules :');
    console.log('üìä loadDashboard:', typeof loadDashboard);
    console.log('üìù loadEntries:', typeof loadEntries);
    console.log('üìã loadAccounts:', typeof loadAccounts);
    console.log('üíæ initializeData:', typeof initializeData);
    
    if (typeof loadDashboard === 'function') {
        console.log('‚úÖ dashboard.js charg√© correctement');
        loadDashboard();
    } else {
        console.log('‚ùå dashboard.js non charg√©');
    }
}

// Exposer globalement pour debug
window.testModuleLoading = testModuleLoading;

// =============================================================================
// EVENT LISTENERS & INITIALIZATION - ENRICHI AVEC S√âCURIT√â (CONSERV√â + AM√âLIOR√â)
// =============================================================================
function bindEventListeners() {
    try {
        // Company selector - CRITIQUE POUR LA S√âPARATION DES DONN√âES (AM√âLIOR√â)
        setTimeout(() => {
            const companySelect = document.getElementById('activeCompanySelect');
            if (companySelect) {
                companySelect.addEventListener('change', function(e) {
                    // Utiliser la nouvelle fonction s√©curis√©e
                    selectActiveCompany(e.target.value);
                    
                    // Maintenir la compatibilit√© avec l'ancien syst√®me
                    app.currentCompany = e.target.value;
                    
                    if (typeof updateSelectedCompanyInfo === 'function') {
                        updateSelectedCompanyInfo();
                    }
                    console.log('‚úÖ Entreprise s√©lectionn√©e:', app.currentCompany);
                });
            }
        }, 100);

        // Sidebar toggle (CONSERV√â)
        const sidebarToggle = document.getElementById('sidebarToggle');
        if (sidebarToggle) {
            sidebarToggle.addEventListener('click', function() {
                const sidebar = document.getElementById('sidebar');
                if (sidebar) {
                    sidebar.classList.toggle('-translate-x-full');
                }
            });
        }

        // Login form (CONSERV√â)
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', function(e) {
                e.preventDefault();
                if (typeof handleLogin === 'function') {
                    handleLogin();
                } else {
                    console.warn('‚ö†Ô∏è handleLogin non disponible');
                }
            });
        }

        // Close sidebar on outside click (mobile) (CONSERV√â)
        document.addEventListener('click', function(e) {
            const sidebar = document.getElementById('sidebar');
            const sidebarToggle = document.getElementById('sidebarToggle');

            if (window.innerWidth < 1024 && sidebar && sidebarToggle && !sidebar.contains(e.target) && !sidebarToggle.contains(e.target)) {
                sidebar.classList.add('-translate-x-full');
            }
        });
    } catch (error) {
        console.error('Erreur bindEventListeners:', error);
    }
}

function initializeApp() {
    try {
        console.log('üîÑ Initialisation de l'application...');

        // D'abord initialiser les donn√©es
        initializeData();
        
        // Simuler la connexion de Marie Kouassi si pas encore connect√©e
        if (!app.currentUser) {
            console.log('üë§ Simulation connexion Marie Kouassi...');
            app.currentUser = {
                id: 1,
                name: 'Marie Kouassi',
                email: 'marie.kouassi@entreprise.com',
                role: 'Collaborateur Senior',
                assignedCompanies: [1, 2, 3], // Acc√®s √† plusieurs entreprises
                status: 'Actif'
            };
            app.currentProfile = 'collaborateur_senior';
            app.isAuthenticated = true;
        }

        // Puis charger navigation et user info
        loadNavigationMenu();
        updateUserInfo();

        // CRITIQUE - Initialiser la s√©paration des donn√©es par entreprise
        if (app.currentUser && app.currentProfile) {
            companyDataManager.initializeCompanySelection();
            
            // Initialiser la synchronisation PIWA si autoris√©e
            if (syncManager.canAccessAutoSync()) {
                syncManager.initializePIWASync();
            }
        }

        // S'assurer que les fonctions manquantes ont des fallbacks APR√àS avoir charg√© les vrais modules
        setTimeout(() => {
            moduleManager.ensureFunctionsExist();
        }, 100);

        // Charger le dashboard en dernier, apr√®s l'initialisation compl√®te
        setTimeout(() => {
            if (typeof loadDashboard === 'function') {
                console.log('üìä Chargement du vrai dashboard...');
                loadDashboard();
            } else {
                console.warn('‚ö†Ô∏è dashboard.js non charg√©, utilisation du fallback');
                moduleManager.showFilteredModuleFallback('loadDashboard');
            }
        }, 200);

        bindEventListeners();

        console.log('‚úÖ DOUK√à Compta Pro initialis√© avec succ√®s avec s√©paration des donn√©es !');
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation:', error);
        showErrorMessage('Erreur lors de l\'initialisation de l\'application');
    }
}

// =============================================================================
// FONCTIONS UTILITAIRES (CONSERV√âES)
// =============================================================================
function showSuccessMessage(message) {
    alert(message);
}

function showErrorMessage(message) {
    alert('‚ùå ' + message);
}

// Close theme menu when clicking outside (CONSERV√â + AM√âLIOR√â)
document.addEventListener('click', function(e) {
    const menu = document.getElementById('themeMenu');
    const button = e.target.closest('[onclick="toggleThemeMenu()"]');
    if (menu && !menu.contains(e.target) && !button) {
        menu.classList.add('hidden');
    }

    // Close notifications panel when clicking outside (CONSERV√â)
    const notifPanel = document.getElementById('notificationsPanel');
    const notifButton = e.target.closest('[onclick="toggleNotificationsPanel()"]');
    if (notifPanel && !notifPanel.contains(e.target) && !notifButton) {
        notifPanel.classList.add('hidden');
    }

    // Close company selector modal when clicking outside (NOUVEAU)
    const companySelectorModal = document.getElementById('companySelectorModal');
    if (companySelectorModal && e.target === companySelectorModal) {
        closeCompanySelector();
    }
});

// =============================================================================
// APPLICATION START - ENRICHI AVEC S√âCURIT√â (CONSERV√â + AM√âLIOR√â)
// =============================================================================

// APPLICATION START (CONSERV√â + AM√âLIOR√â)
document.addEventListener('DOMContentLoaded', function() {
    try {
        themeManager.init();
        setTimeout(() => {
            bindEventListeners();
            console.log('üöÄ DOUK√à Compta Pro - Application d√©marr√©e avec gestion s√©curis√©e des modules');
            console.log('üîí S√©paration des donn√©es par entreprise: ACTIV√âE');
            console.log('üîÑ Synchronisation PIWA:', syncManager.canAccessAutoSync() ? 'AUTORIS√âE' : 'NON AUTORIS√âE');
        }, 100);
    } catch (error) {
        console.error('‚ùå Erreur au d√©marrage:', error);
    }
});

// Protection globale contre les erreurs (CONSERV√â)
window.addEventListener('error', function(e) {
    console.error('‚ùå Erreur globale captur√©e:', e.error);
});

window.addEventListener('unhandledrejection', function(e) {
    console.error('‚ùå Promesse rejet√©e:', e.reason);
});

// =============================================================================
// FONCTION DE NETTOYAGE √Ä LA FERMETURE (NOUVEAU)
// =============================================================================
window.addEventListener('beforeunload', function() {
    // Arr√™ter la synchronisation automatique
    if (syncManager.initialized) {
        syncManager.stopAutoSync();
    }
    
    // Sauvegarder l'√©tat actuel
    if (app.currentCompanyId) {
        localStorage.setItem('selectedCompanyId', app.currentCompanyId);
    }
    
    console.log('üîÑ Application ferm√©e proprement');
});
