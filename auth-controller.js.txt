// =============================================================================
// DOUK√à Compta Pro - Contr√¥leur d'authentification v3.1
// =============================================================================

class AuthController {
    constructor(securityManager) {
        this.security = securityManager;
        this.loginAttempts = new Map();
        this.maxAttempts = 5;
        this.lockoutDuration = 15 * 60 * 1000; // 15 minutes
        
        console.log('üîê AuthController initialis√©');
    }

    // Authentification d'un utilisateur
    authenticateUser(email, password) {
        console.log('üîê Tentative d\'authentification pour:', email);
        
        // V√©rifier les tentatives de connexion
        if (this.isAccountLocked(email)) {
            return {
                success: false,
                message: 'Compte temporairement verrouill√©. R√©essayez plus tard.',
                lockoutRemaining: this.getLockoutRemaining(email)
            };
        }

        // Rechercher l'utilisateur
        const user = window.app.users.find(u => u.email.toLowerCase() === email.toLowerCase());

        if (!user) {
            this.recordFailedAttempt(email);
            console.log('‚ùå Utilisateur non trouv√© pour email:', email);
            return {
                success: false,
                message: 'Email ou mot de passe incorrect'
            };
        }

        console.log('üîç Utilisateur trouv√©:', user.name, 'Profil:', user.profile);

        // V√©rifier le mot de passe
        if (!this.verifyPassword(password, user.passwordHash)) {
            this.recordFailedAttempt(email);
            console.log('‚ùå Mot de passe incorrect');
            return {
                success: false,
                message: 'Email ou mot de passe incorrect'
            };
        }

        // V√©rifier le statut du compte
        if (user.status !== 'Actif') {
            return {
                success: false,
                message: 'Compte utilisateur d√©sactiv√©. Contactez votre administrateur.'
            };
        }

        // R√©initialiser les tentatives de connexion
        this.clearFailedAttempts(email);

        // D√©finir l'utilisateur courant
        window.app.currentUser = user;
        window.app.currentProfile = user.profile;

        // Mettre √† jour la derni√®re connexion
        user.lastLogin = new Date().toISOString();

        // Pour les utilisateurs avec une seule entreprise, la s√©lectionner automatiquement
        if (user.profile === 'user' || user.profile === 'caissier') {
            if (user.companyId && window.unifiedManager) {
                window.unifiedManager.selectCompany(user.companyId);
            }
        }

        // Log de s√©curit√©
        this.security.logSecurityEvent('login_success', {
            userId: user.id,
            email: user.email,
            profile: user.profile
        });

        console.log(`‚úÖ Connexion r√©ussie: ${user.name} (${user.profile})`);

        return {
            success: true,
            user: user,
            dashboard: this.security.getDashboardForProfile(user.profile),
            requiresCompanySelection: this.security.requiresCompanySelection(user.profile) && !window.app.currentCompanyId,
            permissions: this.security.getCurrentUserPermissions()
        };
    }

    // D√©connexion s√©curis√©e
    logout() {
        const user = window.app.currentUser;
        
        if (user) {
            // Log de s√©curit√©
            this.security.logSecurityEvent('logout', {
                userId: user.id,
                email: user.email,
                sessionDuration: this.getSessionDuration()
            });
        }

        // Nettoyer les donn√©es de session
        window.app.currentUser = null;
        window.app.currentProfile = null;
        window.app.currentCompanyId = null;
        
        if (window.unifiedManager) {
            window.unifiedManager.clearFilteredDataCache();
        }

        console.log('üö™ D√©connexion effectu√©e');
    }

    // V√©rification du mot de passe
    verifyPassword(password, hash) {
        return this.hashPassword(password) === hash;
    }

    // Hachage du mot de passe
    hashPassword(password) {
        return btoa(password + 'DOUKE_SALT_2024');
    }

    // Enregistrer une tentative de connexion √©chou√©e
    recordFailedAttempt(email) {
        const attempts = this.loginAttempts.get(email) || { count: 0, firstAttempt: Date.now() };
        attempts.count++;
        attempts.lastAttempt = Date.now();
        
        if (attempts.count === 1) {
            attempts.firstAttempt = Date.now();
        }
        
        this.loginAttempts.set(email, attempts);

        // Log de s√©curit√©
        this.security.logSecurityEvent('login_failed', {
            email,
            attemptCount: attempts.count
        });

        if (attempts.count >= this.maxAttempts) {
            this.security.logSecurityEvent('account_locked', { email });
        }
    }

    // V√©rifier si un compte est verrouill√©
    isAccountLocked(email) {
        const attempts = this.loginAttempts.get(email);
        if (!attempts || attempts.count < this.maxAttempts) {
            return false;
        }

        const timeSinceLastAttempt = Date.now() - attempts.lastAttempt;
        return timeSinceLastAttempt < this.lockoutDuration;
    }

    // Obtenir le temps restant de verrouillage
    getLockoutRemaining(email) {
        const attempts = this.loginAttempts.get(email);
        if (!attempts) return 0;

        const timeSinceLastAttempt = Date.now() - attempts.lastAttempt;
        const remaining = this.lockoutDuration - timeSinceLastAttempt;
        return Math.max(0, Math.ceil(remaining / 1000)); // en secondes
    }

    // Effacer les tentatives √©chou√©es
    clearFailedAttempts(email) {
        this.loginAttempts.delete(email);
    }

    // Changer le mot de passe
    changePassword(userId, currentPassword, newPassword) {
        const user = window.app.users.find(u => u.id === userId);
        if (!user) {
            throw new Error('Utilisateur non trouv√©');
        }

        // V√©rifier le mot de passe actuel
        if (!this.verifyPassword(currentPassword, user.passwordHash)) {
            throw new Error('Mot de passe actuel incorrect');
        }

        // Valider le nouveau mot de passe
        this.validatePassword(newPassword);

        // Mettre √† jour le mot de passe
        user.passwordHash = this.hashPassword(newPassword);
        user.passwordChanged = new Date().toISOString();

        // Log de s√©curit√©
        this.security.logSecurityEvent('password_changed', {
            userId: user.id,
            email: user.email
        });

        return true;
    }

    // R√©initialiser le mot de passe (admin seulement)
    resetPassword(userId, newPassword = null) {
        // V√©rification des permissions
        if (!window.app.currentUser || window.app.currentUser.profile !== 'admin') {
            throw new SecurityError('Seuls les administrateurs peuvent r√©initialiser les mots de passe');
        }

        const user = window.app.users.find(u => u.id === userId);
        if (!user) {
            throw new Error('Utilisateur non trouv√©');
        }

        // G√©n√©rer un mot de passe temporaire si non fourni
        const tempPassword = newPassword || this.generateTemporaryPassword();
        
        // Valider le mot de passe
        this.validatePassword(tempPassword);

        // Mettre √† jour
        user.passwordHash = this.hashPassword(tempPassword);
        user.passwordChanged = new Date().toISOString();
        user.requirePasswordChange = true;

        // Log de s√©curit√©
        this.security.logSecurityEvent('password_reset', {
            userId: user.id,
            email: user.email,
            resetBy: window.app.currentUser.id
        });

        return tempPassword;
    }

    // Validation du mot de passe
    validatePassword(password) {
        if (!password || password.length < 6) {
            throw new Error('Le mot de passe doit contenir au moins 6 caract√®res');
        }

        if (!/(?=.*[a-z])(?=.*[A-Z])|(?=.*\d)/.test(password)) {
            throw new Error('Le mot de passe doit contenir au moins une majuscule et une minuscule, ou un chiffre');
        }

        return true;
    }

    // G√©n√©rer un mot de passe temporaire
    generateTemporaryPassword() {
        const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789';
        let password = '';
        for (let i = 0; i < 8; i++) {
            password += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return password;
    }

    // V√©rifier la session
    validateSession() {
        const user = window.app.currentUser;
        if (!user) {
            return false;
        }

        // V√©rifier si l'utilisateur est toujours actif
        const currentUser = window.app.users.find(u => u.id === user.id);
        if (!currentUser || currentUser.status !== 'Actif') {
            this.logout();
            return false;
        }

        return true;
    }

    // Obtenir la dur√©e de session
    getSessionDuration() {
        const user = window.app.currentUser;
        if (!user || !user.lastLogin) {
            return 0;
        }

        return Date.now() - new Date(user.lastLogin).getTime();
    }

    // Obtenir des informations sur la session
    getSessionInfo() {
        const user = window.app.currentUser;
        if (!user) {
            return null;
        }

        return {
            user: {
                id: user.id,
                name: user.name,
                email: user.email,
                profile: user.profile,
                role: user.role
            },
            session: {
                loginTime: user.lastLogin,
                duration: this.getSessionDuration(),
                companyId: window.app.currentCompanyId,
                permissions: this.security.getCurrentUserPermissions()
            }
        };
    }

    // Remplir automatiquement les identifiants (pour les comptes de d√©monstration)
    fillDemoCredentials(profile) {
        const credentials = {
            'admin': { email: 'admin@doukecompta.ci', password: 'admin123' },
            'collaborateur_senior': { email: 'marie.kouassi@cabinet.com', password: 'marie123' },
            'collaborateur': { email: 'jean.diabate@cabinet.com', password: 'jean123' },
            'user': { email: 'atraore@sarltech.ci', password: 'user123' },
            'caissier': { email: 'ikone@caisse.ci', password: 'caisse123' }
        };

        const cred = credentials[profile];
        if (cred) {
            const emailInput = document.getElementById('loginEmail');
            const passwordInput = document.getElementById('loginPassword');
            
            if (emailInput && passwordInput) {
                emailInput.value = cred.email;
                passwordInput.value = cred.password;
                
                if (window.unifiedManager && window.unifiedManager.notificationManager) {
                    window.unifiedManager.notificationManager.show(
                        'info', 
                        'Identifiants pr√©-remplis', 
                        `Profil ${profile} s√©lectionn√©`
                    );
                }
            }
        }
    }

    // Statistiques d'authentification
    getAuthStats() {
        const now = Date.now();
        const dayAgo = now - (24 * 60 * 60 * 1000);
        
        const recentLogs = this.security.getSecurityLogs().filter(log => 
            new Date(log.timestamp).getTime() > dayAgo
        );

        const loginAttempts = recentLogs.filter(log => log.event === 'login_failed').length;
        const successfulLogins = recentLogs.filter(log => log.event === 'login_success').length;
        const lockedAccounts = Array.from(this.loginAttempts.values())
            .filter(attempts => attempts.count >= this.maxAttempts).length;

        return {
            successfulLogins,
            failedAttempts: loginAttempts,
            lockedAccounts,
            successRate: successfulLogins > 0 ? (successfulLogins / (successfulLogins + loginAttempts) * 100).toFixed(1) : 0
        };
    }
}

// Fonctions globales pour l'interface
function handleSecureLogin() {
    const email = document.getElementById('loginEmail')?.value;
    const password = document.getElementById('loginPassword')?.value;
    const loginButton = document.getElementById('loginButton');

    if (!email || !password) {
        if (window.unifiedManager?.notificationManager) {
            window.unifiedManager.notificationManager.show('error', 'Erreur', 'Veuillez saisir votre email et mot de passe.');
        }
        return;
    }

    // D√©sactiver le bouton et montrer le loading
    if (loginButton) {
        loginButton.disabled = true;
        loginButton.innerHTML = '<div class="loading-spinner mr-2"></div>Connexion...';
    }

    setTimeout(() => {
        const result = window.unifiedManager?.authenticateUser(email, password);

        if (result?.success) {
            showMainApp();
            if (window.unifiedManager?.notificationManager) {
                window.unifiedManager.notificationManager.show('success', 'Connexion r√©ussie', `Bienvenue ${result.user.name} !`);
            }
        } else {
            if (window.unifiedManager?.notificationManager) {
                window.unifiedManager.notificationManager.show('error', 'Erreur de connexion', result?.message || 'Erreur inconnue');
            }
        }

        // R√©activer le bouton
        if (loginButton) {
            loginButton.disabled = false;
            loginButton.innerHTML = '<i class="fas fa-sign-in-alt mr-2"></i>Connexion S√©curis√©e';
        }
    }, 1000);
}

function confirmSecureLogout() {
    if (window.unifiedManager?.modalManager) {
        window.unifiedManager.modalManager.confirm(
            'D√©connexion S√©curis√©e',
            '√ätes-vous s√ªr de vouloir vous d√©connecter ? Toutes les donn√©es non sauvegard√©es seront perdues.',
            () => {
                secureLogout();
            }
        );
    }
}

function secureLogout() {
    window.unifiedManager?.logout();
    showLoginInterface();
    if (window.unifiedManager?.notificationManager) {
        window.unifiedManager.notificationManager.show('info', 'D√©connexion', 'D√©connexion s√©curis√©e effectu√©e. √Ä bient√¥t !');
    }
}

function fillCredentials(profile) {
    if (window.unifiedManager?.authController) {
        window.unifiedManager.authController.fillDemoCredentials(profile);
    }
}

function togglePassword() {
    const passwordInput = document.getElementById('loginPassword');
    const toggleIcon = document.getElementById('passwordToggleIcon');

    if (passwordInput && toggleIcon) {
        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleIcon.className = 'fas fa-eye-slash';
        } else {
            passwordInput.type = 'password';
            toggleIcon.className = 'fas fa-eye';
        }
    }
}

// Export de la classe
window.AuthController = AuthController;

console.log('üì¶ Module AuthController charg√©');